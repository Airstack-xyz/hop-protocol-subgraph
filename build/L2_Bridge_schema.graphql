type BonderAdded @entity {
  id: ID!
  newBonder: String!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type BonderRemoved @entity {
  id: ID!
  previousBonder: String!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type MultipleWithdrawalsSettled @entity {
  id: ID!
  bonder: String!
  rootHash: Bytes!
  totalBondsSettled: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Stake @entity {
  id: ID!
  account: String!
  amount: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type TransferFromL1Completed @entity {
  id: ID!
  recipient: String!
  amount: BigInt!
  amountOutMin: BigInt!
  deadline: BigInt!
  relayer: String!
  relayerFee: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type TransferRootSet @entity {
  id: ID!
  rootHash: Bytes!
  totalAmount: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type TransferSent @entity {
  id: ID!
  transferId: Bytes!
  destinationChainId: BigInt!
  recipient: String!
  amount: BigInt!
  transferNonce: Bytes!
  bonderFee: BigInt!
  index: BigInt!
  amountOutMin: BigInt!
  deadline: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type TransfersCommitted @entity {
  id: ID!
  destinationChainId: BigInt!
  rootHash: Bytes!
  totalAmount: BigInt!
  rootCommittedAt: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Unstake @entity {
  id: ID!
  account: String!
  amount: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type WithdrawalBondSettled @entity {
  id: ID!
  bonder: String!
  transferId: Bytes!
  rootHash: Bytes!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type WithdrawalBonded @entity {
  id: ID!
  transferId: Bytes!
  amount: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Withdrew @entity {
  id: ID!
  transferId: Bytes!
  recipient: String!
  amount: BigInt!
  transferNonce: Bytes!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type TokenSwap @entity {
  id: ID!
  buyer: String!
  tokensSold: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  boughtId: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Transfer @entity {
  id: ID!
  from: String!
  to: String!
  value: BigInt!

  transactionHash: String!
  transactionIndex: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  contractAddress: String!
  token: String!
}

type Tvl @entity {
  id: ID!
  amount: BigInt!
  token: String!
}

type Volume @entity {
  id: ID!
  amount: BigInt!
  token: String!
}
