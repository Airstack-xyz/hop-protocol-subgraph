// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BonderAdded extends ethereum.Event {
  get params(): BonderAdded__Params {
    return new BonderAdded__Params(this);
  }
}

export class BonderAdded__Params {
  _event: BonderAdded;

  constructor(event: BonderAdded) {
    this._event = event;
  }

  get newBonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BonderRemoved extends ethereum.Event {
  get params(): BonderRemoved__Params {
    return new BonderRemoved__Params(this);
  }
}

export class BonderRemoved__Params {
  _event: BonderRemoved;

  constructor(event: BonderRemoved) {
    this._event = event;
  }

  get previousBonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChallengeResolved extends ethereum.Event {
  get params(): ChallengeResolved__Params {
    return new ChallengeResolved__Params(this);
  }
}

export class ChallengeResolved__Params {
  _event: ChallengeResolved;

  constructor(event: ChallengeResolved) {
    this._event = event;
  }

  get transferRootId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MultipleWithdrawalsSettled extends ethereum.Event {
  get params(): MultipleWithdrawalsSettled__Params {
    return new MultipleWithdrawalsSettled__Params(this);
  }
}

export class MultipleWithdrawalsSettled__Params {
  _event: MultipleWithdrawalsSettled;

  constructor(event: MultipleWithdrawalsSettled) {
    this._event = event;
  }

  get bonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rootHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get totalBondsSettled(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBondChallenged extends ethereum.Event {
  get params(): TransferBondChallenged__Params {
    return new TransferBondChallenged__Params(this);
  }
}

export class TransferBondChallenged__Params {
  _event: TransferBondChallenged;

  constructor(event: TransferBondChallenged) {
    this._event = event;
  }

  get transferRootId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferRootBonded extends ethereum.Event {
  get params(): TransferRootBonded__Params {
    return new TransferRootBonded__Params(this);
  }
}

export class TransferRootBonded__Params {
  _event: TransferRootBonded;

  constructor(event: TransferRootBonded) {
    this._event = event;
  }

  get root(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferRootConfirmed extends ethereum.Event {
  get params(): TransferRootConfirmed__Params {
    return new TransferRootConfirmed__Params(this);
  }
}

export class TransferRootConfirmed__Params {
  _event: TransferRootConfirmed;

  constructor(event: TransferRootConfirmed) {
    this._event = event;
  }

  get originChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get destinationChainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rootHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TransferRootSet extends ethereum.Event {
  get params(): TransferRootSet__Params {
    return new TransferRootSet__Params(this);
  }
}

export class TransferRootSet__Params {
  _event: TransferRootSet;

  constructor(event: TransferRootSet) {
    this._event = event;
  }

  get rootHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferSentToL2 extends ethereum.Event {
  get params(): TransferSentToL2__Params {
    return new TransferSentToL2__Params(this);
  }
}

export class TransferSentToL2__Params {
  _event: TransferSentToL2;

  constructor(event: TransferSentToL2) {
    this._event = event;
  }

  get chainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get relayer(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get relayerFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalBondSettled extends ethereum.Event {
  get params(): WithdrawalBondSettled__Params {
    return new WithdrawalBondSettled__Params(this);
  }
}

export class WithdrawalBondSettled__Params {
  _event: WithdrawalBondSettled;

  constructor(event: WithdrawalBondSettled) {
    this._event = event;
  }

  get bonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class WithdrawalBonded extends ethereum.Event {
  get params(): WithdrawalBonded__Params {
    return new WithdrawalBonded__Params(this);
  }
}

export class WithdrawalBonded__Params {
  _event: WithdrawalBonded;

  constructor(event: WithdrawalBonded) {
    this._event = event;
  }

  get transferId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrew extends ethereum.Event {
  get params(): Withdrew__Params {
    return new Withdrew__Params(this);
  }
}

export class Withdrew__Params {
  _event: Withdrew;

  constructor(event: Withdrew) {
    this._event = event;
  }

  get transferId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class L1_Bridge__getTransferRootResultValue0Struct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get amountWithdrawn(): BigInt {
    return this[1].toBigInt();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class L1_Bridge__transferBondsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class L1_Bridge extends ethereum.SmartContract {
  static bind(address: Address): L1_Bridge {
    return new L1_Bridge("L1_Bridge", address);
  }

  CHALLENGE_AMOUNT_DIVISOR(): BigInt {
    let result = super.call(
      "CHALLENGE_AMOUNT_DIVISOR",
      "CHALLENGE_AMOUNT_DIVISOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CHALLENGE_AMOUNT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CHALLENGE_AMOUNT_DIVISOR",
      "CHALLENGE_AMOUNT_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TIME_SLOT_SIZE(): BigInt {
    let result = super.call("TIME_SLOT_SIZE", "TIME_SLOT_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TIME_SLOT_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TIME_SLOT_SIZE",
      "TIME_SLOT_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainBalance(param0: BigInt): BigInt {
    let result = super.call("chainBalance", "chainBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_chainBalance(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "chainBalance",
      "chainBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengePeriod(): BigInt {
    let result = super.call(
      "challengePeriod",
      "challengePeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_challengePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengePeriod",
      "challengePeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeResolutionPeriod(): BigInt {
    let result = super.call(
      "challengeResolutionPeriod",
      "challengeResolutionPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_challengeResolutionPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengeResolutionPeriod",
      "challengeResolutionPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crossDomainMessengerWrappers(param0: BigInt): Address {
    let result = super.call(
      "crossDomainMessengerWrappers",
      "crossDomainMessengerWrappers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_crossDomainMessengerWrappers(
    param0: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "crossDomainMessengerWrappers",
      "crossDomainMessengerWrappers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBondForTransferAmount(amount: BigInt): BigInt {
    let result = super.call(
      "getBondForTransferAmount",
      "getBondForTransferAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getBondForTransferAmount(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBondForTransferAmount",
      "getBondForTransferAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBondedWithdrawalAmount(bonder: Address, transferId: Bytes): BigInt {
    let result = super.call(
      "getBondedWithdrawalAmount",
      "getBondedWithdrawalAmount(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(bonder),
        ethereum.Value.fromFixedBytes(transferId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBondedWithdrawalAmount(
    bonder: Address,
    transferId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBondedWithdrawalAmount",
      "getBondedWithdrawalAmount(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(bonder),
        ethereum.Value.fromFixedBytes(transferId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallengeAmountForTransferAmount(amount: BigInt): BigInt {
    let result = super.call(
      "getChallengeAmountForTransferAmount",
      "getChallengeAmountForTransferAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getChallengeAmountForTransferAmount(
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChallengeAmountForTransferAmount",
      "getChallengeAmountForTransferAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCredit(bonder: Address): BigInt {
    let result = super.call("getCredit", "getCredit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);

    return result[0].toBigInt();
  }

  try_getCredit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCredit", "getCredit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDebitAndAdditionalDebit(bonder: Address): BigInt {
    let result = super.call(
      "getDebitAndAdditionalDebit",
      "getDebitAndAdditionalDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );

    return result[0].toBigInt();
  }

  try_getDebitAndAdditionalDebit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDebitAndAdditionalDebit",
      "getDebitAndAdditionalDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIsBonder(maybeBonder: Address): boolean {
    let result = super.call("getIsBonder", "getIsBonder(address):(bool)", [
      ethereum.Value.fromAddress(maybeBonder)
    ]);

    return result[0].toBoolean();
  }

  try_getIsBonder(maybeBonder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsBonder", "getIsBonder(address):(bool)", [
      ethereum.Value.fromAddress(maybeBonder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRawDebit(bonder: Address): BigInt {
    let result = super.call("getRawDebit", "getRawDebit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);

    return result[0].toBigInt();
  }

  try_getRawDebit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRawDebit",
      "getRawDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeSlot(time: BigInt): BigInt {
    let result = super.call("getTimeSlot", "getTimeSlot(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(time)
    ]);

    return result[0].toBigInt();
  }

  try_getTimeSlot(time: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeSlot",
      "getTimeSlot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(time)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransferId(
    chainId: BigInt,
    recipient: Address,
    amount: BigInt,
    transferNonce: Bytes,
    bonderFee: BigInt,
    amountOutMin: BigInt,
    deadline: BigInt
  ): Bytes {
    let result = super.call(
      "getTransferId",
      "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(transferNonce),
        ethereum.Value.fromUnsignedBigInt(bonderFee),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransferId(
    chainId: BigInt,
    recipient: Address,
    amount: BigInt,
    transferNonce: Bytes,
    bonderFee: BigInt,
    amountOutMin: BigInt,
    deadline: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransferId",
      "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(transferNonce),
        ethereum.Value.fromUnsignedBigInt(bonderFee),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransferRoot(
    rootHash: Bytes,
    totalAmount: BigInt
  ): L1_Bridge__getTransferRootResultValue0Struct {
    let result = super.call(
      "getTransferRoot",
      "getTransferRoot(bytes32,uint256):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );

    return result[0].toTuple() as L1_Bridge__getTransferRootResultValue0Struct;
  }

  try_getTransferRoot(
    rootHash: Bytes,
    totalAmount: BigInt
  ): ethereum.CallResult<L1_Bridge__getTransferRootResultValue0Struct> {
    let result = super.tryCall(
      "getTransferRoot",
      "getTransferRoot(bytes32,uint256):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as L1_Bridge__getTransferRootResultValue0Struct
    );
  }

  getTransferRootId(rootHash: Bytes, totalAmount: BigInt): Bytes {
    let result = super.call(
      "getTransferRootId",
      "getTransferRootId(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransferRootId(
    rootHash: Bytes,
    totalAmount: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransferRootId",
      "getTransferRootId(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isChainIdPaused(param0: BigInt): boolean {
    let result = super.call(
      "isChainIdPaused",
      "isChainIdPaused(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_isChainIdPaused(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isChainIdPaused",
      "isChainIdPaused(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTransferIdSpent(transferId: Bytes): boolean {
    let result = super.call(
      "isTransferIdSpent",
      "isTransferIdSpent(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(transferId)]
    );

    return result[0].toBoolean();
  }

  try_isTransferIdSpent(transferId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransferIdSpent",
      "isTransferIdSpent(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(transferId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minTransferRootBondDelay(): BigInt {
    let result = super.call(
      "minTransferRootBondDelay",
      "minTransferRootBondDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minTransferRootBondDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minTransferRootBondDelay",
      "minTransferRootBondDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeSlotToAmountBonded(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "timeSlotToAmountBonded",
      "timeSlotToAmountBonded(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_timeSlotToAmountBonded(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeSlotToAmountBonded",
      "timeSlotToAmountBonded(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferBonds(param0: Bytes): L1_Bridge__transferBondsResult {
    let result = super.call(
      "transferBonds",
      "transferBonds(bytes32):(address,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new L1_Bridge__transferBondsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBoolean()
    );
  }

  try_transferBonds(
    param0: Bytes
  ): ethereum.CallResult<L1_Bridge__transferBondsResult> {
    let result = super.tryCall(
      "transferBonds",
      "transferBonds(bytes32):(address,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new L1_Bridge__transferBondsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBoolean()
      )
    );
  }

  transferRootCommittedAt(param0: Bytes): BigInt {
    let result = super.call(
      "transferRootCommittedAt",
      "transferRootCommittedAt(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_transferRootCommittedAt(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferRootCommittedAt",
      "transferRootCommittedAt(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get bonders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBonderCall extends ethereum.Call {
  get inputs(): AddBonderCall__Inputs {
    return new AddBonderCall__Inputs(this);
  }

  get outputs(): AddBonderCall__Outputs {
    return new AddBonderCall__Outputs(this);
  }
}

export class AddBonderCall__Inputs {
  _call: AddBonderCall;

  constructor(call: AddBonderCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBonderCall__Outputs {
  _call: AddBonderCall;

  constructor(call: AddBonderCall) {
    this._call = call;
  }
}

export class BondTransferRootCall extends ethereum.Call {
  get inputs(): BondTransferRootCall__Inputs {
    return new BondTransferRootCall__Inputs(this);
  }

  get outputs(): BondTransferRootCall__Outputs {
    return new BondTransferRootCall__Outputs(this);
  }
}

export class BondTransferRootCall__Inputs {
  _call: BondTransferRootCall;

  constructor(call: BondTransferRootCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BondTransferRootCall__Outputs {
  _call: BondTransferRootCall;

  constructor(call: BondTransferRootCall) {
    this._call = call;
  }
}

export class BondWithdrawalCall extends ethereum.Call {
  get inputs(): BondWithdrawalCall__Inputs {
    return new BondWithdrawalCall__Inputs(this);
  }

  get outputs(): BondWithdrawalCall__Outputs {
    return new BondWithdrawalCall__Outputs(this);
  }
}

export class BondWithdrawalCall__Inputs {
  _call: BondWithdrawalCall;

  constructor(call: BondWithdrawalCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BondWithdrawalCall__Outputs {
  _call: BondWithdrawalCall;

  constructor(call: BondWithdrawalCall) {
    this._call = call;
  }
}

export class ChallengeTransferBondCall extends ethereum.Call {
  get inputs(): ChallengeTransferBondCall__Inputs {
    return new ChallengeTransferBondCall__Inputs(this);
  }

  get outputs(): ChallengeTransferBondCall__Outputs {
    return new ChallengeTransferBondCall__Outputs(this);
  }
}

export class ChallengeTransferBondCall__Inputs {
  _call: ChallengeTransferBondCall;

  constructor(call: ChallengeTransferBondCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChallengeTransferBondCall__Outputs {
  _call: ChallengeTransferBondCall;

  constructor(call: ChallengeTransferBondCall) {
    this._call = call;
  }
}

export class ConfirmTransferRootCall extends ethereum.Call {
  get inputs(): ConfirmTransferRootCall__Inputs {
    return new ConfirmTransferRootCall__Inputs(this);
  }

  get outputs(): ConfirmTransferRootCall__Outputs {
    return new ConfirmTransferRootCall__Outputs(this);
  }
}

export class ConfirmTransferRootCall__Inputs {
  _call: ConfirmTransferRootCall;

  constructor(call: ConfirmTransferRootCall) {
    this._call = call;
  }

  get originChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rootHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get rootCommittedAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConfirmTransferRootCall__Outputs {
  _call: ConfirmTransferRootCall;

  constructor(call: ConfirmTransferRootCall) {
    this._call = call;
  }
}

export class RemoveBonderCall extends ethereum.Call {
  get inputs(): RemoveBonderCall__Inputs {
    return new RemoveBonderCall__Inputs(this);
  }

  get outputs(): RemoveBonderCall__Outputs {
    return new RemoveBonderCall__Outputs(this);
  }
}

export class RemoveBonderCall__Inputs {
  _call: RemoveBonderCall;

  constructor(call: RemoveBonderCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveBonderCall__Outputs {
  _call: RemoveBonderCall;

  constructor(call: RemoveBonderCall) {
    this._call = call;
  }
}

export class RescueTransferRootCall extends ethereum.Call {
  get inputs(): RescueTransferRootCall__Inputs {
    return new RescueTransferRootCall__Inputs(this);
  }

  get outputs(): RescueTransferRootCall__Outputs {
    return new RescueTransferRootCall__Outputs(this);
  }
}

export class RescueTransferRootCall__Inputs {
  _call: RescueTransferRootCall;

  constructor(call: RescueTransferRootCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RescueTransferRootCall__Outputs {
  _call: RescueTransferRootCall;

  constructor(call: RescueTransferRootCall) {
    this._call = call;
  }
}

export class ResolveChallengeCall extends ethereum.Call {
  get inputs(): ResolveChallengeCall__Inputs {
    return new ResolveChallengeCall__Inputs(this);
  }

  get outputs(): ResolveChallengeCall__Outputs {
    return new ResolveChallengeCall__Outputs(this);
  }
}

export class ResolveChallengeCall__Inputs {
  _call: ResolveChallengeCall;

  constructor(call: ResolveChallengeCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResolveChallengeCall__Outputs {
  _call: ResolveChallengeCall;

  constructor(call: ResolveChallengeCall) {
    this._call = call;
  }
}

export class SendToL2Call extends ethereum.Call {
  get inputs(): SendToL2Call__Inputs {
    return new SendToL2Call__Inputs(this);
  }

  get outputs(): SendToL2Call__Outputs {
    return new SendToL2Call__Outputs(this);
  }
}

export class SendToL2Call__Inputs {
  _call: SendToL2Call;

  constructor(call: SendToL2Call) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get relayer(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get relayerFee(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SendToL2Call__Outputs {
  _call: SendToL2Call;

  constructor(call: SendToL2Call) {
    this._call = call;
  }
}

export class SetChainIdDepositsPausedCall extends ethereum.Call {
  get inputs(): SetChainIdDepositsPausedCall__Inputs {
    return new SetChainIdDepositsPausedCall__Inputs(this);
  }

  get outputs(): SetChainIdDepositsPausedCall__Outputs {
    return new SetChainIdDepositsPausedCall__Outputs(this);
  }
}

export class SetChainIdDepositsPausedCall__Inputs {
  _call: SetChainIdDepositsPausedCall;

  constructor(call: SetChainIdDepositsPausedCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isPaused(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetChainIdDepositsPausedCall__Outputs {
  _call: SetChainIdDepositsPausedCall;

  constructor(call: SetChainIdDepositsPausedCall) {
    this._call = call;
  }
}

export class SetChallengePeriodCall extends ethereum.Call {
  get inputs(): SetChallengePeriodCall__Inputs {
    return new SetChallengePeriodCall__Inputs(this);
  }

  get outputs(): SetChallengePeriodCall__Outputs {
    return new SetChallengePeriodCall__Outputs(this);
  }
}

export class SetChallengePeriodCall__Inputs {
  _call: SetChallengePeriodCall;

  constructor(call: SetChallengePeriodCall) {
    this._call = call;
  }

  get _challengePeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChallengePeriodCall__Outputs {
  _call: SetChallengePeriodCall;

  constructor(call: SetChallengePeriodCall) {
    this._call = call;
  }
}

export class SetChallengeResolutionPeriodCall extends ethereum.Call {
  get inputs(): SetChallengeResolutionPeriodCall__Inputs {
    return new SetChallengeResolutionPeriodCall__Inputs(this);
  }

  get outputs(): SetChallengeResolutionPeriodCall__Outputs {
    return new SetChallengeResolutionPeriodCall__Outputs(this);
  }
}

export class SetChallengeResolutionPeriodCall__Inputs {
  _call: SetChallengeResolutionPeriodCall;

  constructor(call: SetChallengeResolutionPeriodCall) {
    this._call = call;
  }

  get _challengeResolutionPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChallengeResolutionPeriodCall__Outputs {
  _call: SetChallengeResolutionPeriodCall;

  constructor(call: SetChallengeResolutionPeriodCall) {
    this._call = call;
  }
}

export class SetCrossDomainMessengerWrapperCall extends ethereum.Call {
  get inputs(): SetCrossDomainMessengerWrapperCall__Inputs {
    return new SetCrossDomainMessengerWrapperCall__Inputs(this);
  }

  get outputs(): SetCrossDomainMessengerWrapperCall__Outputs {
    return new SetCrossDomainMessengerWrapperCall__Outputs(this);
  }
}

export class SetCrossDomainMessengerWrapperCall__Inputs {
  _call: SetCrossDomainMessengerWrapperCall;

  constructor(call: SetCrossDomainMessengerWrapperCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _crossDomainMessengerWrapper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetCrossDomainMessengerWrapperCall__Outputs {
  _call: SetCrossDomainMessengerWrapperCall;

  constructor(call: SetCrossDomainMessengerWrapperCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetMinTransferRootBondDelayCall extends ethereum.Call {
  get inputs(): SetMinTransferRootBondDelayCall__Inputs {
    return new SetMinTransferRootBondDelayCall__Inputs(this);
  }

  get outputs(): SetMinTransferRootBondDelayCall__Outputs {
    return new SetMinTransferRootBondDelayCall__Outputs(this);
  }
}

export class SetMinTransferRootBondDelayCall__Inputs {
  _call: SetMinTransferRootBondDelayCall;

  constructor(call: SetMinTransferRootBondDelayCall) {
    this._call = call;
  }

  get _minTransferRootBondDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinTransferRootBondDelayCall__Outputs {
  _call: SetMinTransferRootBondDelayCall;

  constructor(call: SetMinTransferRootBondDelayCall) {
    this._call = call;
  }
}

export class SettleBondedWithdrawalCall extends ethereum.Call {
  get inputs(): SettleBondedWithdrawalCall__Inputs {
    return new SettleBondedWithdrawalCall__Inputs(this);
  }

  get outputs(): SettleBondedWithdrawalCall__Outputs {
    return new SettleBondedWithdrawalCall__Outputs(this);
  }
}

export class SettleBondedWithdrawalCall__Inputs {
  _call: SettleBondedWithdrawalCall;

  constructor(call: SettleBondedWithdrawalCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get transferRootTotalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get transferIdTreeIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get siblings(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get totalLeaves(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SettleBondedWithdrawalCall__Outputs {
  _call: SettleBondedWithdrawalCall;

  constructor(call: SettleBondedWithdrawalCall) {
    this._call = call;
  }
}

export class SettleBondedWithdrawalsCall extends ethereum.Call {
  get inputs(): SettleBondedWithdrawalsCall__Inputs {
    return new SettleBondedWithdrawalsCall__Inputs(this);
  }

  get outputs(): SettleBondedWithdrawalsCall__Outputs {
    return new SettleBondedWithdrawalsCall__Outputs(this);
  }
}

export class SettleBondedWithdrawalsCall__Inputs {
  _call: SettleBondedWithdrawalsCall;

  constructor(call: SettleBondedWithdrawalsCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferIds(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettleBondedWithdrawalsCall__Outputs {
  _call: SettleBondedWithdrawalsCall;

  constructor(call: SettleBondedWithdrawalsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get rootHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get transferRootTotalAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get transferIdTreeIndex(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get siblings(): Array<Bytes> {
    return this._call.inputValues[9].value.toBytesArray();
  }

  get totalLeaves(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
