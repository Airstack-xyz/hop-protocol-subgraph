// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BonderAdded extends ethereum.Event {
  get params(): BonderAdded__Params {
    return new BonderAdded__Params(this);
  }
}

export class BonderAdded__Params {
  _event: BonderAdded;

  constructor(event: BonderAdded) {
    this._event = event;
  }

  get newBonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BonderRemoved extends ethereum.Event {
  get params(): BonderRemoved__Params {
    return new BonderRemoved__Params(this);
  }
}

export class BonderRemoved__Params {
  _event: BonderRemoved;

  constructor(event: BonderRemoved) {
    this._event = event;
  }

  get previousBonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MultipleWithdrawalsSettled extends ethereum.Event {
  get params(): MultipleWithdrawalsSettled__Params {
    return new MultipleWithdrawalsSettled__Params(this);
  }
}

export class MultipleWithdrawalsSettled__Params {
  _event: MultipleWithdrawalsSettled;

  constructor(event: MultipleWithdrawalsSettled) {
    this._event = event;
  }

  get bonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rootHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get totalBondsSettled(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferFromL1Completed extends ethereum.Event {
  get params(): TransferFromL1Completed__Params {
    return new TransferFromL1Completed__Params(this);
  }
}

export class TransferFromL1Completed__Params {
  _event: TransferFromL1Completed;

  constructor(event: TransferFromL1Completed) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get relayer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get relayerFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TransferRootSet extends ethereum.Event {
  get params(): TransferRootSet__Params {
    return new TransferRootSet__Params(this);
  }
}

export class TransferRootSet__Params {
  _event: TransferRootSet;

  constructor(event: TransferRootSet) {
    this._event = event;
  }

  get rootHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferSent extends ethereum.Event {
  get params(): TransferSent__Params {
    return new TransferSent__Params(this);
  }
}

export class TransferSent__Params {
  _event: TransferSent;

  constructor(event: TransferSent) {
    this._event = event;
  }

  get transferId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get chainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class TransfersCommitted extends ethereum.Event {
  get params(): TransfersCommitted__Params {
    return new TransfersCommitted__Params(this);
  }
}

export class TransfersCommitted__Params {
  _event: TransfersCommitted;

  constructor(event: TransfersCommitted) {
    this._event = event;
  }

  get destinationChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rootHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rootCommittedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalBondSettled extends ethereum.Event {
  get params(): WithdrawalBondSettled__Params {
    return new WithdrawalBondSettled__Params(this);
  }
}

export class WithdrawalBondSettled__Params {
  _event: WithdrawalBondSettled;

  constructor(event: WithdrawalBondSettled) {
    this._event = event;
  }

  get bonder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transferId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class WithdrawalBonded extends ethereum.Event {
  get params(): WithdrawalBonded__Params {
    return new WithdrawalBonded__Params(this);
  }
}

export class WithdrawalBonded__Params {
  _event: WithdrawalBonded;

  constructor(event: WithdrawalBonded) {
    this._event = event;
  }

  get transferId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrew extends ethereum.Event {
  get params(): Withdrew__Params {
    return new Withdrew__Params(this);
  }
}

export class Withdrew__Params {
  _event: Withdrew;

  constructor(event: Withdrew) {
    this._event = event;
  }

  get transferId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class L2_Bridge__getTransferRootResultValue0Struct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get amountWithdrawn(): BigInt {
    return this[1].toBigInt();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }
}

export class L2_Bridge extends ethereum.SmartContract {
  static bind(address: Address): L2_Bridge {
    return new L2_Bridge("L2_Bridge", address);
  }

  activeChainIds(param0: BigInt): boolean {
    let result = super.call(
      "activeChainIds",
      "activeChainIds(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_activeChainIds(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activeChainIds",
      "activeChainIds(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ammWrapper(): Address {
    let result = super.call("ammWrapper", "ammWrapper():(address)", []);

    return result[0].toAddress();
  }

  try_ammWrapper(): ethereum.CallResult<Address> {
    let result = super.tryCall("ammWrapper", "ammWrapper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBondedWithdrawalAmount(bonder: Address, transferId: Bytes): BigInt {
    let result = super.call(
      "getBondedWithdrawalAmount",
      "getBondedWithdrawalAmount(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(bonder),
        ethereum.Value.fromFixedBytes(transferId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBondedWithdrawalAmount(
    bonder: Address,
    transferId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBondedWithdrawalAmount",
      "getBondedWithdrawalAmount(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(bonder),
        ethereum.Value.fromFixedBytes(transferId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCredit(bonder: Address): BigInt {
    let result = super.call("getCredit", "getCredit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);

    return result[0].toBigInt();
  }

  try_getCredit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getCredit", "getCredit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDebitAndAdditionalDebit(bonder: Address): BigInt {
    let result = super.call(
      "getDebitAndAdditionalDebit",
      "getDebitAndAdditionalDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );

    return result[0].toBigInt();
  }

  try_getDebitAndAdditionalDebit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDebitAndAdditionalDebit",
      "getDebitAndAdditionalDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIsBonder(maybeBonder: Address): boolean {
    let result = super.call("getIsBonder", "getIsBonder(address):(bool)", [
      ethereum.Value.fromAddress(maybeBonder)
    ]);

    return result[0].toBoolean();
  }

  try_getIsBonder(maybeBonder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsBonder", "getIsBonder(address):(bool)", [
      ethereum.Value.fromAddress(maybeBonder)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextTransferNonce(): Bytes {
    let result = super.call(
      "getNextTransferNonce",
      "getNextTransferNonce():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getNextTransferNonce(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getNextTransferNonce",
      "getNextTransferNonce():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRawDebit(bonder: Address): BigInt {
    let result = super.call("getRawDebit", "getRawDebit(address):(uint256)", [
      ethereum.Value.fromAddress(bonder)
    ]);

    return result[0].toBigInt();
  }

  try_getRawDebit(bonder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRawDebit",
      "getRawDebit(address):(uint256)",
      [ethereum.Value.fromAddress(bonder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransferId(
    chainId: BigInt,
    recipient: Address,
    amount: BigInt,
    transferNonce: Bytes,
    bonderFee: BigInt,
    amountOutMin: BigInt,
    deadline: BigInt
  ): Bytes {
    let result = super.call(
      "getTransferId",
      "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(transferNonce),
        ethereum.Value.fromUnsignedBigInt(bonderFee),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransferId(
    chainId: BigInt,
    recipient: Address,
    amount: BigInt,
    transferNonce: Bytes,
    bonderFee: BigInt,
    amountOutMin: BigInt,
    deadline: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransferId",
      "getTransferId(uint256,address,uint256,bytes32,uint256,uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromFixedBytes(transferNonce),
        ethereum.Value.fromUnsignedBigInt(bonderFee),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTransferRoot(
    rootHash: Bytes,
    totalAmount: BigInt
  ): L2_Bridge__getTransferRootResultValue0Struct {
    let result = super.call(
      "getTransferRoot",
      "getTransferRoot(bytes32,uint256):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );

    return result[0].toTuple() as L2_Bridge__getTransferRootResultValue0Struct;
  }

  try_getTransferRoot(
    rootHash: Bytes,
    totalAmount: BigInt
  ): ethereum.CallResult<L2_Bridge__getTransferRootResultValue0Struct> {
    let result = super.tryCall(
      "getTransferRoot",
      "getTransferRoot(bytes32,uint256):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as L2_Bridge__getTransferRootResultValue0Struct
    );
  }

  getTransferRootId(rootHash: Bytes, totalAmount: BigInt): Bytes {
    let result = super.call(
      "getTransferRootId",
      "getTransferRootId(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransferRootId(
    rootHash: Bytes,
    totalAmount: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransferRootId",
      "getTransferRootId(bytes32,uint256):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(rootHash),
        ethereum.Value.fromUnsignedBigInt(totalAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hToken(): Address {
    let result = super.call("hToken", "hToken():(address)", []);

    return result[0].toAddress();
  }

  try_hToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("hToken", "hToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTransferIdSpent(transferId: Bytes): boolean {
    let result = super.call(
      "isTransferIdSpent",
      "isTransferIdSpent(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(transferId)]
    );

    return result[0].toBoolean();
  }

  try_isTransferIdSpent(transferId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTransferIdSpent",
      "isTransferIdSpent(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(transferId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  l1BridgeAddress(): Address {
    let result = super.call(
      "l1BridgeAddress",
      "l1BridgeAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_l1BridgeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "l1BridgeAddress",
      "l1BridgeAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  l1BridgeCaller(): Address {
    let result = super.call("l1BridgeCaller", "l1BridgeCaller():(address)", []);

    return result[0].toAddress();
  }

  try_l1BridgeCaller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "l1BridgeCaller",
      "l1BridgeCaller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  l1Governance(): Address {
    let result = super.call("l1Governance", "l1Governance():(address)", []);

    return result[0].toAddress();
  }

  try_l1Governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("l1Governance", "l1Governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastCommitTimeForChainId(param0: BigInt): BigInt {
    let result = super.call(
      "lastCommitTimeForChainId",
      "lastCommitTimeForChainId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCommitTimeForChainId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCommitTimeForChainId",
      "lastCommitTimeForChainId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPendingTransfers(): BigInt {
    let result = super.call(
      "maxPendingTransfers",
      "maxPendingTransfers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxPendingTransfers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPendingTransfers",
      "maxPendingTransfers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBonderBps(): BigInt {
    let result = super.call("minBonderBps", "minBonderBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minBonderBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minBonderBps", "minBonderBps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBonderFeeAbsolute(): BigInt {
    let result = super.call(
      "minBonderFeeAbsolute",
      "minBonderFeeAbsolute():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBonderFeeAbsolute(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBonderFeeAbsolute",
      "minBonderFeeAbsolute():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumForceCommitDelay(): BigInt {
    let result = super.call(
      "minimumForceCommitDelay",
      "minimumForceCommitDelay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumForceCommitDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumForceCommitDelay",
      "minimumForceCommitDelay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingAmountForChainId(param0: BigInt): BigInt {
    let result = super.call(
      "pendingAmountForChainId",
      "pendingAmountForChainId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingAmountForChainId(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingAmountForChainId",
      "pendingAmountForChainId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingTransferIdsForChainId(param0: BigInt, param1: BigInt): Bytes {
    let result = super.call(
      "pendingTransferIdsForChainId",
      "pendingTransferIdsForChainId(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_pendingTransferIdsForChainId(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "pendingTransferIdsForChainId",
      "pendingTransferIdsForChainId(uint256,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  transferNonceIncrementer(): BigInt {
    let result = super.call(
      "transferNonceIncrementer",
      "transferNonceIncrementer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transferNonceIncrementer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferNonceIncrementer",
      "transferNonceIncrementer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _l1Governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _hToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _l1BridgeAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _activeChainIds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get bonders(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddActiveChainIdsCall extends ethereum.Call {
  get inputs(): AddActiveChainIdsCall__Inputs {
    return new AddActiveChainIdsCall__Inputs(this);
  }

  get outputs(): AddActiveChainIdsCall__Outputs {
    return new AddActiveChainIdsCall__Outputs(this);
  }
}

export class AddActiveChainIdsCall__Inputs {
  _call: AddActiveChainIdsCall;

  constructor(call: AddActiveChainIdsCall) {
    this._call = call;
  }

  get chainIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class AddActiveChainIdsCall__Outputs {
  _call: AddActiveChainIdsCall;

  constructor(call: AddActiveChainIdsCall) {
    this._call = call;
  }
}

export class AddBonderCall extends ethereum.Call {
  get inputs(): AddBonderCall__Inputs {
    return new AddBonderCall__Inputs(this);
  }

  get outputs(): AddBonderCall__Outputs {
    return new AddBonderCall__Outputs(this);
  }
}

export class AddBonderCall__Inputs {
  _call: AddBonderCall;

  constructor(call: AddBonderCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBonderCall__Outputs {
  _call: AddBonderCall;

  constructor(call: AddBonderCall) {
    this._call = call;
  }
}

export class BondWithdrawalCall extends ethereum.Call {
  get inputs(): BondWithdrawalCall__Inputs {
    return new BondWithdrawalCall__Inputs(this);
  }

  get outputs(): BondWithdrawalCall__Outputs {
    return new BondWithdrawalCall__Outputs(this);
  }
}

export class BondWithdrawalCall__Inputs {
  _call: BondWithdrawalCall;

  constructor(call: BondWithdrawalCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BondWithdrawalCall__Outputs {
  _call: BondWithdrawalCall;

  constructor(call: BondWithdrawalCall) {
    this._call = call;
  }
}

export class BondWithdrawalAndDistributeCall extends ethereum.Call {
  get inputs(): BondWithdrawalAndDistributeCall__Inputs {
    return new BondWithdrawalAndDistributeCall__Inputs(this);
  }

  get outputs(): BondWithdrawalAndDistributeCall__Outputs {
    return new BondWithdrawalAndDistributeCall__Outputs(this);
  }
}

export class BondWithdrawalAndDistributeCall__Inputs {
  _call: BondWithdrawalAndDistributeCall;

  constructor(call: BondWithdrawalAndDistributeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class BondWithdrawalAndDistributeCall__Outputs {
  _call: BondWithdrawalAndDistributeCall;

  constructor(call: BondWithdrawalAndDistributeCall) {
    this._call = call;
  }
}

export class CommitTransfersCall extends ethereum.Call {
  get inputs(): CommitTransfersCall__Inputs {
    return new CommitTransfersCall__Inputs(this);
  }

  get outputs(): CommitTransfersCall__Outputs {
    return new CommitTransfersCall__Outputs(this);
  }
}

export class CommitTransfersCall__Inputs {
  _call: CommitTransfersCall;

  constructor(call: CommitTransfersCall) {
    this._call = call;
  }

  get destinationChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CommitTransfersCall__Outputs {
  _call: CommitTransfersCall;

  constructor(call: CommitTransfersCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get relayer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get relayerFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class RemoveActiveChainIdsCall extends ethereum.Call {
  get inputs(): RemoveActiveChainIdsCall__Inputs {
    return new RemoveActiveChainIdsCall__Inputs(this);
  }

  get outputs(): RemoveActiveChainIdsCall__Outputs {
    return new RemoveActiveChainIdsCall__Outputs(this);
  }
}

export class RemoveActiveChainIdsCall__Inputs {
  _call: RemoveActiveChainIdsCall;

  constructor(call: RemoveActiveChainIdsCall) {
    this._call = call;
  }

  get chainIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RemoveActiveChainIdsCall__Outputs {
  _call: RemoveActiveChainIdsCall;

  constructor(call: RemoveActiveChainIdsCall) {
    this._call = call;
  }
}

export class RemoveBonderCall extends ethereum.Call {
  get inputs(): RemoveBonderCall__Inputs {
    return new RemoveBonderCall__Inputs(this);
  }

  get outputs(): RemoveBonderCall__Outputs {
    return new RemoveBonderCall__Outputs(this);
  }
}

export class RemoveBonderCall__Inputs {
  _call: RemoveBonderCall;

  constructor(call: RemoveBonderCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveBonderCall__Outputs {
  _call: RemoveBonderCall;

  constructor(call: RemoveBonderCall) {
    this._call = call;
  }
}

export class RescueTransferRootCall extends ethereum.Call {
  get inputs(): RescueTransferRootCall__Inputs {
    return new RescueTransferRootCall__Inputs(this);
  }

  get outputs(): RescueTransferRootCall__Outputs {
    return new RescueTransferRootCall__Outputs(this);
  }
}

export class RescueTransferRootCall__Inputs {
  _call: RescueTransferRootCall;

  constructor(call: RescueTransferRootCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get originalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RescueTransferRootCall__Outputs {
  _call: RescueTransferRootCall;

  constructor(call: RescueTransferRootCall) {
    this._call = call;
  }
}

export class SendCall extends ethereum.Call {
  get inputs(): SendCall__Inputs {
    return new SendCall__Inputs(this);
  }

  get outputs(): SendCall__Outputs {
    return new SendCall__Outputs(this);
  }
}

export class SendCall__Inputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }

  get chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SendCall__Outputs {
  _call: SendCall;

  constructor(call: SendCall) {
    this._call = call;
  }
}

export class SetAmmWrapperCall extends ethereum.Call {
  get inputs(): SetAmmWrapperCall__Inputs {
    return new SetAmmWrapperCall__Inputs(this);
  }

  get outputs(): SetAmmWrapperCall__Outputs {
    return new SetAmmWrapperCall__Outputs(this);
  }
}

export class SetAmmWrapperCall__Inputs {
  _call: SetAmmWrapperCall;

  constructor(call: SetAmmWrapperCall) {
    this._call = call;
  }

  get _ammWrapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAmmWrapperCall__Outputs {
  _call: SetAmmWrapperCall;

  constructor(call: SetAmmWrapperCall) {
    this._call = call;
  }
}

export class SetHopBridgeTokenOwnerCall extends ethereum.Call {
  get inputs(): SetHopBridgeTokenOwnerCall__Inputs {
    return new SetHopBridgeTokenOwnerCall__Inputs(this);
  }

  get outputs(): SetHopBridgeTokenOwnerCall__Outputs {
    return new SetHopBridgeTokenOwnerCall__Outputs(this);
  }
}

export class SetHopBridgeTokenOwnerCall__Inputs {
  _call: SetHopBridgeTokenOwnerCall;

  constructor(call: SetHopBridgeTokenOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHopBridgeTokenOwnerCall__Outputs {
  _call: SetHopBridgeTokenOwnerCall;

  constructor(call: SetHopBridgeTokenOwnerCall) {
    this._call = call;
  }
}

export class SetL1BridgeAddressCall extends ethereum.Call {
  get inputs(): SetL1BridgeAddressCall__Inputs {
    return new SetL1BridgeAddressCall__Inputs(this);
  }

  get outputs(): SetL1BridgeAddressCall__Outputs {
    return new SetL1BridgeAddressCall__Outputs(this);
  }
}

export class SetL1BridgeAddressCall__Inputs {
  _call: SetL1BridgeAddressCall;

  constructor(call: SetL1BridgeAddressCall) {
    this._call = call;
  }

  get _l1BridgeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetL1BridgeAddressCall__Outputs {
  _call: SetL1BridgeAddressCall;

  constructor(call: SetL1BridgeAddressCall) {
    this._call = call;
  }
}

export class SetL1BridgeCallerCall extends ethereum.Call {
  get inputs(): SetL1BridgeCallerCall__Inputs {
    return new SetL1BridgeCallerCall__Inputs(this);
  }

  get outputs(): SetL1BridgeCallerCall__Outputs {
    return new SetL1BridgeCallerCall__Outputs(this);
  }
}

export class SetL1BridgeCallerCall__Inputs {
  _call: SetL1BridgeCallerCall;

  constructor(call: SetL1BridgeCallerCall) {
    this._call = call;
  }

  get _l1BridgeCaller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetL1BridgeCallerCall__Outputs {
  _call: SetL1BridgeCallerCall;

  constructor(call: SetL1BridgeCallerCall) {
    this._call = call;
  }
}

export class SetL1GovernanceCall extends ethereum.Call {
  get inputs(): SetL1GovernanceCall__Inputs {
    return new SetL1GovernanceCall__Inputs(this);
  }

  get outputs(): SetL1GovernanceCall__Outputs {
    return new SetL1GovernanceCall__Outputs(this);
  }
}

export class SetL1GovernanceCall__Inputs {
  _call: SetL1GovernanceCall;

  constructor(call: SetL1GovernanceCall) {
    this._call = call;
  }

  get _l1Governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetL1GovernanceCall__Outputs {
  _call: SetL1GovernanceCall;

  constructor(call: SetL1GovernanceCall) {
    this._call = call;
  }
}

export class SetMaxPendingTransfersCall extends ethereum.Call {
  get inputs(): SetMaxPendingTransfersCall__Inputs {
    return new SetMaxPendingTransfersCall__Inputs(this);
  }

  get outputs(): SetMaxPendingTransfersCall__Outputs {
    return new SetMaxPendingTransfersCall__Outputs(this);
  }
}

export class SetMaxPendingTransfersCall__Inputs {
  _call: SetMaxPendingTransfersCall;

  constructor(call: SetMaxPendingTransfersCall) {
    this._call = call;
  }

  get _maxPendingTransfers(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPendingTransfersCall__Outputs {
  _call: SetMaxPendingTransfersCall;

  constructor(call: SetMaxPendingTransfersCall) {
    this._call = call;
  }
}

export class SetMinimumBonderFeeRequirementsCall extends ethereum.Call {
  get inputs(): SetMinimumBonderFeeRequirementsCall__Inputs {
    return new SetMinimumBonderFeeRequirementsCall__Inputs(this);
  }

  get outputs(): SetMinimumBonderFeeRequirementsCall__Outputs {
    return new SetMinimumBonderFeeRequirementsCall__Outputs(this);
  }
}

export class SetMinimumBonderFeeRequirementsCall__Inputs {
  _call: SetMinimumBonderFeeRequirementsCall;

  constructor(call: SetMinimumBonderFeeRequirementsCall) {
    this._call = call;
  }

  get _minBonderBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBonderFeeAbsolute(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinimumBonderFeeRequirementsCall__Outputs {
  _call: SetMinimumBonderFeeRequirementsCall;

  constructor(call: SetMinimumBonderFeeRequirementsCall) {
    this._call = call;
  }
}

export class SetMinimumForceCommitDelayCall extends ethereum.Call {
  get inputs(): SetMinimumForceCommitDelayCall__Inputs {
    return new SetMinimumForceCommitDelayCall__Inputs(this);
  }

  get outputs(): SetMinimumForceCommitDelayCall__Outputs {
    return new SetMinimumForceCommitDelayCall__Outputs(this);
  }
}

export class SetMinimumForceCommitDelayCall__Inputs {
  _call: SetMinimumForceCommitDelayCall;

  constructor(call: SetMinimumForceCommitDelayCall) {
    this._call = call;
  }

  get _minimumForceCommitDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumForceCommitDelayCall__Outputs {
  _call: SetMinimumForceCommitDelayCall;

  constructor(call: SetMinimumForceCommitDelayCall) {
    this._call = call;
  }
}

export class SetTransferRootCall extends ethereum.Call {
  get inputs(): SetTransferRootCall__Inputs {
    return new SetTransferRootCall__Inputs(this);
  }

  get outputs(): SetTransferRootCall__Outputs {
    return new SetTransferRootCall__Outputs(this);
  }
}

export class SetTransferRootCall__Inputs {
  _call: SetTransferRootCall;

  constructor(call: SetTransferRootCall) {
    this._call = call;
  }

  get rootHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTransferRootCall__Outputs {
  _call: SetTransferRootCall;

  constructor(call: SetTransferRootCall) {
    this._call = call;
  }
}

export class SettleBondedWithdrawalCall extends ethereum.Call {
  get inputs(): SettleBondedWithdrawalCall__Inputs {
    return new SettleBondedWithdrawalCall__Inputs(this);
  }

  get outputs(): SettleBondedWithdrawalCall__Outputs {
    return new SettleBondedWithdrawalCall__Outputs(this);
  }
}

export class SettleBondedWithdrawalCall__Inputs {
  _call: SettleBondedWithdrawalCall;

  constructor(call: SettleBondedWithdrawalCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get rootHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get transferRootTotalAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get transferIdTreeIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get siblings(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get totalLeaves(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SettleBondedWithdrawalCall__Outputs {
  _call: SettleBondedWithdrawalCall;

  constructor(call: SettleBondedWithdrawalCall) {
    this._call = call;
  }
}

export class SettleBondedWithdrawalsCall extends ethereum.Call {
  get inputs(): SettleBondedWithdrawalsCall__Inputs {
    return new SettleBondedWithdrawalsCall__Inputs(this);
  }

  get outputs(): SettleBondedWithdrawalsCall__Outputs {
    return new SettleBondedWithdrawalsCall__Outputs(this);
  }
}

export class SettleBondedWithdrawalsCall__Inputs {
  _call: SettleBondedWithdrawalsCall;

  constructor(call: SettleBondedWithdrawalsCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transferIds(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get totalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettleBondedWithdrawalsCall__Outputs {
  _call: SettleBondedWithdrawalsCall;

  constructor(call: SettleBondedWithdrawalsCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get bonder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferNonce(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get bonderFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get rootHash(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get transferRootTotalAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get transferIdTreeIndex(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get siblings(): Array<Bytes> {
    return this._call.inputValues[9].value.toBytesArray();
  }

  get totalLeaves(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
