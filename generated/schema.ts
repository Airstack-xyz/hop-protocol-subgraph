// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TransferSent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TransferSent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TransferSent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TransferSent", id.toString(), this);
  }

  static load(id: string): TransferSent | null {
    return store.get("TransferSent", id) as TransferSent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transferId(): Bytes {
    let value = this.get("transferId");
    return value.toBytes();
  }

  set transferId(value: Bytes) {
    this.set("transferId", Value.fromBytes(value));
  }

  get destinationChainId(): BigInt {
    let value = this.get("destinationChainId");
    return value.toBigInt();
  }

  set destinationChainId(value: BigInt) {
    this.set("destinationChainId", Value.fromBigInt(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transferNonce(): Bytes {
    let value = this.get("transferNonce");
    return value.toBytes();
  }

  set transferNonce(value: Bytes) {
    this.set("transferNonce", Value.fromBytes(value));
  }

  get bonderFee(): BigInt {
    let value = this.get("bonderFee");
    return value.toBigInt();
  }

  set bonderFee(value: BigInt) {
    this.set("bonderFee", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get amountOutMin(): BigInt {
    let value = this.get("amountOutMin");
    return value.toBigInt();
  }

  set amountOutMin(value: BigInt) {
    this.set("amountOutMin", Value.fromBigInt(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }
}
